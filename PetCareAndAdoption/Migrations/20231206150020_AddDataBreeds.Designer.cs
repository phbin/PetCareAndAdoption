// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PetCareAndAdoption.Data;

#nullable disable

namespace PetCareAndAdoption.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20231206150020_AddDataBreeds")]
    partial class AddDataBreeds
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PetCareAndAdoption.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PetCareAndAdoption.Data.Breeds", b =>
                {
                    b.Property<string>("breedID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("breedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("speciesID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("breedID");

                    b.HasIndex("speciesID");

                    b.ToTable("Breeds");

                    b.HasData(
                        new
                        {
                            breedID = "cb233460-d4bc-4422-a890-3710e5d08f03",
                            breedName = "Bird",
                            speciesID = "d12deb4e-e07d-4178-8e46-0ef65811353d"
                        },
                        new
                        {
                            breedID = "265b4eea-33b8-4387-b52d-55b7494e9aef",
                            breedName = "Hamster",
                            speciesID = "d12deb4e-e07d-4178-8e46-0ef65811353d"
                        },
                        new
                        {
                            breedID = "6a06df46-3a91-4db7-83c5-ad8e419b2511",
                            breedName = "Chicken",
                            speciesID = "d12deb4e-e07d-4178-8e46-0ef65811353d"
                        },
                        new
                        {
                            breedID = "dccc78d1-63c4-49fc-97a9-41ba98684843",
                            breedName = "Hedgehog",
                            speciesID = "d12deb4e-e07d-4178-8e46-0ef65811353d"
                        },
                        new
                        {
                            breedID = "1d9948ac-c287-4dc2-a460-5c2d3e76abd5",
                            breedName = "Rabbit",
                            speciesID = "d12deb4e-e07d-4178-8e46-0ef65811353d"
                        },
                        new
                        {
                            breedID = "aac59a3b-a513-42da-a334-9c31aaf7b945",
                            breedName = "Turtle",
                            speciesID = "d12deb4e-e07d-4178-8e46-0ef65811353d"
                        },
                        new
                        {
                            breedID = "44a9c2c2-6900-4090-9601-7b505987a57c",
                            breedName = "Tortoise",
                            speciesID = "d12deb4e-e07d-4178-8e46-0ef65811353d"
                        },
                        new
                        {
                            breedID = "692ef102-e320-4f14-8a2d-d9ef6ffcaba7",
                            breedName = "Snake",
                            speciesID = "d12deb4e-e07d-4178-8e46-0ef65811353d"
                        },
                        new
                        {
                            breedID = "1cdb0b79-c5ed-4c69-9426-b0f4b6ee90b7",
                            breedName = "Fish",
                            speciesID = "d12deb4e-e07d-4178-8e46-0ef65811353d"
                        },
                        new
                        {
                            breedID = "514d6676-cc8f-4bdb-95fa-272e23b7759a",
                            breedName = "Monkey",
                            speciesID = "d12deb4e-e07d-4178-8e46-0ef65811353d"
                        },
                        new
                        {
                            breedID = "3555ee7c-b574-4d73-aef8-8df67a11ce6a",
                            breedName = "Others",
                            speciesID = "d12deb4e-e07d-4178-8e46-0ef65811353d"
                        });
                });

            modelBuilder.Entity("PetCareAndAdoption.Data.Species", b =>
                {
                    b.Property<string>("speciesID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("speciesName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("speciesID");

                    b.ToTable("Species");

                    b.HasData(
                        new
                        {
                            speciesID = "0656e083-0979-489b-8326-1f373d058246",
                            speciesName = "Cat"
                        },
                        new
                        {
                            speciesID = "c9bbfad5-8140-4e81-bb87-75456d8ac9a1",
                            speciesName = "Dog"
                        },
                        new
                        {
                            speciesID = "d12deb4e-e07d-4178-8e46-0ef65811353d",
                            speciesName = "Others"
                        });
                });

            modelBuilder.Entity("PetCareAndAdoption.Data.UserInfo", b =>
                {
                    b.Property<string>("userID")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userID");

                    b.ToTable("UserInfo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PetCareAndAdoption.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PetCareAndAdoption.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetCareAndAdoption.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PetCareAndAdoption.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetCareAndAdoption.Data.Breeds", b =>
                {
                    b.HasOne("PetCareAndAdoption.Data.Species", "Species")
                        .WithMany("Breeds")
                        .HasForeignKey("speciesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Species");
                });

            modelBuilder.Entity("PetCareAndAdoption.Data.Species", b =>
                {
                    b.Navigation("Breeds");
                });
#pragma warning restore 612, 618
        }
    }
}
